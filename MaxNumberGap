 using System;
// you can also use other imports, for example:
using System.Collections.Generic; 
using System.Linq;
// you can write to stdout for debugging purposes, e.g.
// Console.WriteLine("this is a debug message");

class Solution {
    public int solution(int N) {
        // write your code in C# 6.0 with .NET 4.5 (Mono)
      int hold = N; 
      string  binaryNumberStr = ""; 
      int maxBinaryGap;
      
      // convert decimal number to binary

      while(true)
      {
         int rem = N%2;
         int quotient = N/2;
         N = quotient;
         binaryNumberStr = binaryNumberStr + rem.ToString();
         
         if(quotient==0)
         {
             break;
         }
      }
    
    
      char[] binaryNumberCrs = binaryNumberStr.ToCharArray();
      Array.Reverse(binaryNumberCrs);
      binaryNumberStr = new String(binaryNumberCrs);

      Console.WriteLine("Decimal numbers is :" + hold);
      Console.WriteLine("Binary numbers is :");
      Console.WriteLine(binaryNumberStr);

      binaryNumberCrs = binaryNumberStr.ToCharArray();      
      int binaryNumberLength = binaryNumberStr.Length;
      Dictionary<string, int> gapNums = new Dictionary<string,int>();
      int counter = 1;
      int counterValue ;
      int lastBinaryNum = 
                      int.Parse(binaryNumberCrs[binaryNumberLength-1].ToString());
                
       for(int i=0; i<binaryNumberLength-1; i++)
       {
           int currentBinaryNum =  int.Parse(binaryNumberCrs[i].ToString());
           int nextBinaryNum =   int.Parse(binaryNumberCrs[i+1].ToString());

           if(currentBinaryNum==1 && nextBinaryNum==0)
           {
               counterValue = 1;

               while(true)
               { 
                   gapNums[$"Counter{counter}"] = counterValue;
                   counterValue++;
                   i++;

                   currentBinaryNum = int.Parse(binaryNumberCrs[i].ToString());
                   nextBinaryNum =  int.Parse(binaryNumberCrs[i+1].ToString());  
                               
                    // next encounter,  

                   if(currentBinaryNum==0 && nextBinaryNum==1)
                    {
                        break;
                    }
                    
                    // last element is zero, end 
                    
                    if(lastBinaryNum==0 && (i+1)==binaryNumberLength-1)
                    {
                        gapNums[$"Counter{counter}"] = 0;

                        break;
                    } 
               }
           }
           
           counter++;
       }
       
       try  
       {
            maxBinaryGap = gapNums.Values.Max();
            Console.WriteLine($"Binary gap is : {maxBinaryGap}");
            return maxBinaryGap;
       }
       catch
       {
            // the number is all ones, like 1111 , max binary gap is zero
            return 0;

       } 
    }
}
